ผมได้ไปทำความเข้าใจเรื่อง None  มาแล้วครับกับการหาความต่างของ  1 มิติ กับ 2 มิติหรือสามสี่
เดี๋ยวผมจะอธิบายผ่าน Yt = data[None,initLen+1:trainLen+1] 
ซึ่ง ถ้าเราเขียน Yt =data เฉยๆเนี่ย ก็จะเป็นการรับค่าของ data เข้ามาเฉยๆ ซึ่ง data เป็นการเก็บค่าเป็น array 1 มิติ จากการปริ้นมา 
data = [ 0.122064    0.04719682 -0.01833035 ... -0.17013491 -0.13728365
 -0.10034541]
ซึ่งเมื่อเพิ่มคำสั่ง Yt = data[None] จะเป็นการทำให้ array เป็น สองมิติ 
data[None] = [[ 0.122064    0.04719682 -0.01833035 ... -0.17013491 -0.13728365
  -0.10034541]] 
  โดยการสังเกตก็คือ เครื่องหมาย []  ซึ้งเราสามารถดูความต่างได้จาก จำนวนของ [] เช่น data[None] ปริ้นมาได้เป็นอาเย์สองมิติ ซึ่งเราสามารถ พิสูตรจ์ ได้จากคำสั่ง np.ndim 
  จะเป็นการแสดงจำนวนของมิติออกมา ซึ่งลองใช้กับ data[None] จะแสดงค่าออกมา 2 แต่ถ้า data เฉยๆ จะแสดง 1
 ซึ่งเราสวามารถดูขนาด แถว และ หลัก ได้จาก np.shape
 โดยถ้าเราใช้คำสั่ง  data[None].shape ก็จะได้ (,10000)   ทำให้รู้ว่ามี row =1 column = 10000
 ซึ่งคำสั่ง None สามรถใช้  np.expand_dims(data,axis=0) ได้เช่นกันเพื่อปรับให้เป้น array  2 มิติ 
  np.expand_dims(data,axis=0) = [[ 0.122064    0.04719682 -0.01833035 ... -0.17013491 -0.13728365
  -0.10034541]]  เช่นเดียวกัน
  ซึ่ง คำสั่ง None สามารถใช้คำสั่ง np.newaxis แทน ได้เช่นกัน
  เช่น data[np.newaxis] แบบนี้ก็จะได้ค่าเดียวกับ data[None] 
ต่อมาทำการเพิ่ม  initLen+1:trainLen+1 ,  Yt = data[None,initLen+1:trainLen+1] ซึ่งการเพิ่ม initLen+1:trainLen+1 คือการทำหนดขอบเขตตัวเริ่มต้นเเละตัวสิ้นสุดโดยเริ่มจาก initLen+1 ละตัวสุดท้ายที่ trainLen+1
data[None,initLen+1:trainLen+1] =[[-0.09351762 -0.14571328 -0.19540772 ... -0.30151187 -0.33570312 -0.36746866]]
ซึ่ง initLen+1 =101  trainLen+1 =2001
ลองใช้่คำสั่งเช็ค data[None,initLen+1:trainLen+1].shape จะได้ (1, 1900)  หมายความว่า มี row =1 column=1900 ลองคำนวนจำนวนที่รับเข้ามา 2001-101 =1900 ซึ่งตรงกับที่เรารับเข้ามา
เช็คว่าเริ่มที่ 101 ไหม 
ลองปริ้น data[101] = -0.09351762 ซึ่งตรงกับที่เรารับเข้ามา


ซึ่ง คำสั่งที่ใช้รวมกันนี้จะมี np.newaxis ซึ่งคือตัวแทนของ None และ  np.expand_dimsเป็นการเพิ่ม มิติของ array 
